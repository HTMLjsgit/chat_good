
<div class="main_sidebar" id="main_show">
	<div class="yieldBox roomShowBox">
		<% if user_signed_in? %>
			<div id="messages"  data-room_id="<%= @room.id %>" data-current_user="<%= current_user.id %>">
				<%= render @messages %>
			</div>
		<% else %>
			<div id="messages" data-room_id="<%= @room.id %>" data-current_user="<%= nil %>">
				<%= render @messages %>
			</div>
		<% end %>
		<div id="bottomGO"></div>
	</div>
	<div class="edit_smart_phone_button">
		<%= image_tag "矢印ボタン_左2.png", class: "left_button_png" %>
		<%= image_tag "矢印ボタン_右2.png", class: "right_button_png" %>
	</div>
	<div class="smart_phone_sidebarBox">
		<%= link_to room_usermanagers_path(@room), class: "room-user-tags-a" do %>
			<div class="roomuserLinkBox">
				<h1 class="in-room-user-all-text">ルームに入ってるユーザー一覧</h1>
				<%= image_tag "名刺・会員証のアイコン素材.png", class: "icon_png_user_all" %>
			</div>
		<% end %>
		<div class="search_box">
			<!-- ここに検索するスクリプトを書きなさい。 -->
			<div class="find-message-button">
				<h1 class="message-find-text">メッセージを検索</h1>
				<%= image_tag "sho.png" %>
			</div>
			<div class="find-messages-box">
				<%= search_form_for @m_find, remote: true, url: room_path(@room),id: "search_content_message" do |f| %>
					<%= f.text_field :content_cont %><br>
					<%= f.submit "検索", class: "find-message-submit" %>
				<% end %>
			</div>
			<div class="all-display-box">
				<%= form_tag room_path(@room), remote: true, method: :get do |f|  %>
					<%= submit_tag "メッセージをすべて表示", name: 'all_display', class: "all-display-button" %>
				<% end %> 
			</div>
		</div>
		<div class="allurlgo-box" id="room-share-button">
			<h1 class="room-share-button-text">ルームを共有する</h1>
			<%= image_tag "共有アイコン2.png" %>
		</div>
		<div class="requestUrl"><%= request.url %></div>
		<% if @room.public == false %>
			<div id="password-button" class="allurlgo-box">
				<h1 class="room-share-button-text">パスワード</h1>
				<%= image_tag "鍵のアイコン8.png",class: "icon_png_user_all" %>
			</div>
			<div class="password-request-share">パスワード: <%= @room.password %></div>
			<% if user_signed_in? %>
				<% if current_user.id == @room.user_id %>
					<%= link_to room_password_path(@room), class: "room-user-tags-a" do %>
						<div id="password-button" class="allurlgo-box">
							<h1 class="room-share-button-text">パスワードを編集</h1>
							<%= image_tag "鍵のオープンアイコン素材.png" %>
						</div>
					<% end %>
				<% end %>
			<% end %>
		<% end %>
		
		<% @room.usermanagers.each do |usermanager| %>
			<% if user_signed_in? %>
				<% if @room.user_id != current_user.id %>
					<% if usermanager.user_id == current_user.id %>
						<% if usermanager.login == true %>
							<div class="room-delete-usermanager-box">
								<h1 class="room-channsel-text">
									<%= link_to "ルームを退会", room_usermanager_path(@room.id, usermanager.id), method: :delete,data: {confirm: "本当にルームを退会してもよろしいですか？(投稿されたメッセージは削除されません。)"}, class: "kyanseruAccount" %>
								</h1>
								<%= image_tag "人物シルエット_マイナス.png" %>
							</div>
						<% end %>
					<% end %>
				<% end %>
			<% else %>
				<% if usermanager.ip_id == request.ip %>
					<% if usermanager.login == false %>
						<div class="room-delete-usermanager-box">
							<h1 class="room-channsel-text">
								<%= link_to "ルームを退会", room_usermanager_path(@room.id, usermanager.id), method: :delete,data: {confirm: "本当にルームを退会してもよろしいですか？(投稿されたメッセージは削除されません。)"}, class: "kyanseruAccount" %>
							</h1>
							<%= image_tag "人物シルエット_マイナス.png" %>

						</div>
					<% end %>
				<% end %>
			<% end %>
		<% end %>
		<%= link_to room_explanation_path(@room), class: "kyanseruAccount" do %>
			<div class="allurlgo-box">
				<h1 class="room-share-button-text">ルームの詳細</h1>
				<%= image_tag "はてなマークのアイコン.png" %>
			</div>
		<% end %>
		<% if user_signed_in? %>
			<% if current_user.id == @room.user_id %>
				<%= link_to  edit_room_path(@room), class: "room_edit_link" do %>
					<div class="room-edit-box-flex">
						<p class="edit-room-text">
							ルームを編集
						</p>
						<%= image_tag "設定の歯車アイコン　その2.png", id: "setting-img-room" %>
					</div>
				<% end %>
			<% end %>
		<% end %>
		<div>
			<%= link_to "", id: "messagenewLink"  do %>
				<div class="messageitiranBox">
					<h5 class="new-message-link-text">最新のメッセージ</h5>
					<%= image_tag "下向きの矢印のアイコン素材.png",class: "down-arrow-room-png" %>
				</div>
			<% end %>
		</div>
	</div>
</div>
<div class="operationBox">
	<div class="bottomDeleteBox down-right-box">
		<%= image_tag "矢印アイコン_下4.png" %>
	</div>
	<div class="bottomOpenBox down-right-box">
		<%= image_tag "矢印アイコン_上4.png" %>
	</div>
</div>
<div class="bottomRoomBox">
	<h3 class="textCount"></h3>
	<div class="imguploader">
		<%= form_with model: @message, local: false, url: messages_path do |f| %>
			<%= f.file_field :image, id: "img img-value-form" %>
			<%= f.hidden_field :room_id, value: @room.id %>
			<%= f.submit "画像をアップロード" %>
		<% end %>
	</div>
    <div id="all-container">
      <span id="layerd-canvas-area">
        <canvas
          id="draw-area"
          width="600px"
          height="600px"
          style="border: 1px solid #000000; position: absolute;"
        ></canvas>
        <canvas
          id="line-width-indicator"
          width="600px"
          height="600px"
          style="border: 1px solid #000000;"
        ></canvas>
      </span>
      <div id="right">
        <div>
          <div>
            <button id="clear-button" class="menu">全消し</button>
          </div>
          <div>
            <button id="eraser-button" class="menu">消しゴムモード</button>
          </div>
          <button id="draw_picture_btn">お絵描きしたものを画像化する。</button>
          <div>
            FontWeight
            <span id="line-width">5</span>
          </div>
          <input id="range-selector" type="range" alue="5" min="1"max="50"step="0.1"/>

          <input id="line-width-number-field" type="number" value="5" min="1" max="50" step="0.1"/>
        </div>
        <div>
          <span id="color-palette"></span>
        </div>
      </div>
    </div>
    <style>
      #all-container {
        display: flex;
        flex-direction: row;
      }
      #right {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }
      .menu {
        margin-bottom: 20px;
      }
    </style>
	<canvas id="draw-area" width="257" height="257" id="canvas"></canvas>
	<p class="flash_message"></p>
	<div class="formchat">
		<% unless request.os == "PlayStation Vita" %>
			<%= text_area_tag :content, nil, data: {behavior: 'room_speaker'},class: "text_areachat" ,placeholder: "メッセージを送信(Shift + Enter または 送信ボタン)", id: "chat_area"%>
			<div class="submitBox">
				<%= submit_tag "送信", id: "submit" %>
			</div>
		<% end %>
		<% if request.os == "PlayStation Vita" %>
			<div class="submitBox">
				<%= form_with model: @message, local: false, url: messages_path do |f| %>
					<%= f.text_area :content ,id: "chat_area", class: "text_areachat"%>
					<%= f.hidden_field :room_id, value: @room.id %>
					<%= f.submit "送信", id: "submit" %>
				<% end %>
			</div>
		<% end %>

	</div>
</div>
<script>
$(function(){
	 $("#messagenewLink").click(function(e){
	    var submitscroll = $('#bottomGO').offset().top;
	    $('html, body').animate({scrollTop:submitscroll});
	    return e.preventDefault();
	 });
	 var draw_area = document.getElementById("draw-area");
	 
	 var kyo_click = false;
	 $('#room-share-button').click(function(){
	 	if(kyo_click == false){
	 		$('.requestUrl').fadeIn('slow');
	 		kyo_click = true;
	 	}else{
	 		$('.requestUrl').fadeOut('slow');
	 		kyo_click = false;
	 	}
	 })
	 var password_click = false;
	 $('#password-button').click(function(){
	 	if(password_click == false){
	 		$('.password-request-share').fadeIn('slow');
	 		password_click = true;

	 	}else{
	 		$('.password-request-share').fadeOut('slow');
	 		password_click = false;
	 	}
	 });
	  var text_max = 1000; // 最大入力値
	  // $(".textCount").text(text_max - $(".text_chatarea").val().length);
	 $("#chat_area").on("keydown keyup keypress change",function(){
	      var text_length = $(this).val().length;
	      var countdown = text_max - text_length;
	      $(".textCount").text("残り" + String(countdown) + "文字");
	      // CSSは任意で
	      if(countdown < 0){
	          $('.textCount').css({
	              color:'#ff0000',
	              fontWeight:'bold'
	          });
	      } else {
	          $('.textCount').css({
	              color:'#fff',
	              fontWeight:'normal'
	          });
	      }
	  });
	 $('.bottomDeleteBox').click(function(){
	 	$('.bottomOpenBox').css('display', 'block');
	 	$('.bottomDeleteBox').css('display', 'none');
	 	$('.bottomRoomBox').css('transform', 'TranslateY(100%)');
	 	setTimeout(function(){
	 		$('.bottomRoomBox').css('display', 'none');

	 	}, 200);
	 });
	 $('.bottomOpenBox').click(function(){
	 	$('.bottomOpenBox').css('display', 'none');
	 	$('.bottomDeleteBox').css('display', 'block');
	 	// $('.bottomRoomBox').animate2({transform: 'TranslateY(100%)'}, 100);
	 	setTimeout(function(){
	 		$('.bottomRoomBox').css('transform', 'TranslateY(100%)');
	 	}, 1);
	 	setTimeout(function(){
	 		$('.bottomRoomBox').css('display', 'block');
	 		$('.bottomRoomBox').animate2({transform: 'TranslateY(0%)'}, 100);


	 	}, 100);
	 });
	 var click = false;

	 $('.edit_smart_phone_button').click(function(){
	 	if(click == true){
	 		$('.smart_phone_sidebarBox').css('right', '-150%');
	 		$('.left_button_png').css('display', 'block');
	 		$('.right_button_png').css('display', 'none')
	 		click = false;
	 	}else if(click == false){
	 		$('.smart_phone_sidebarBox').css('right', '8%');
	 		$('.right_button_png').css('display', 'block');
	 		$('.left_button_png').css('display', 'none');
	 		click = true;
	 	}
	 });

	 var message_find_click = false;

	 $('.find-message-button').click(function(){
	 	if(message_find_click){
	 		$('.find-messages-box').fadeOut('slow');
	 		$('.all-display-box').fadeOut('slow');
	 		$('.all-display-box').css('display', 'none');
	 		message_find_click = false;
	 	}else if(!message_find_click){
	 		$('.find-messages-box').fadeIn('slow');
	 		$('.all-display-box').fadeIn('slow');
	 		$('.all-display-box').css('display', 'flex');

	 		message_find_click = true;

	 	}
	 });
});

window.addEventListener("load", () => {
  const canvas = document.querySelector("#draw-area");
  ctx = canvas.getContext("2d");
  ctx.fillStyle = "#FFFFFF"; //筆に白い絵の具をつけて
  ctx.fillRect(0, 0, 600, 600); //四角を描く
  const context = canvas.getContext("2d");

  // 現在のマウスの位置を中心に、現在選択している線の太さを「○」で表現するために使用するcanvas
  const canvasForWidthIndicator = document.querySelector(
    "#line-width-indicator"
  );
  const contextForWidthIndicator = canvasForWidthIndicator.getContext(
    "2d"
  );

  const lastPosition = { x: null, y: null };
  let isDrag = false;
  let currentColor = "#000000";

  // 現在の線の太さを記憶する変数
  // <input id="range-selector" type="range"> の値と連動する
  let currentLineWidth = 1;

  function draw(x, y) {
    if (!isDrag) {
      return;
    }
    context.lineCap = "round";
    context.lineJoin = "round";
    context.lineWidth = currentLineWidth;
    context.strokeStyle = currentColor;
    if (lastPosition.x === null || lastPosition.y === null) {
      context.moveTo(x, y);
    } else {
      context.moveTo(lastPosition.x, lastPosition.y);
    }
    context.lineTo(x, y);
    context.stroke();

    lastPosition.x = x;
    lastPosition.y = y;
  }

  // <canvas id="line-width-indicator"> 上で現在のマウスの位置を中心に
  // 線の太さを表現するための「○」を描画する。
  function showLineWidthIndicator(x, y) {
    contextForWidthIndicator.lineCap = "round";
    contextForWidthIndicator.lineJoin = "round";
    contextForWidthIndicator.strokeStyle = currentColor;

    // 「○」の線の太さは細くて良いので1で固定
    contextForWidthIndicator.lineWidth = 1;

    // 過去に描画「○」を削除する。過去の「○」を削除しなかった場合は
    // 過去の「○」が残り続けてします。(以下の画像URLを参照)
    // https://tsuyopon.xyz/wp-content/uploads/2018/09/line-width-indicator-with-bug.gif
    contextForWidthIndicator.clearRect(
      0,
      0,
      canvasForWidthIndicator.width,
      canvasForWidthIndicator.height
    );

    contextForWidthIndicator.beginPath();

    // x, y座標を中心とした円(「○」)を描画する。
    // 第3引数の「currentLineWidth / 2」で、実際に描画する線の太さと同じ大きさになる。
    // ドキュメント: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc
    contextForWidthIndicator.arc(
      x,
      y,
      currentLineWidth / 2,
      0,
      2 * Math.PI
    );

    contextForWidthIndicator.stroke();
  }

  function clear() {
    context.clearRect(0, 0, canvas.width, canvas.height);
    ctx = canvas.getContext("2d");
    ctx.fillStyle = "#FFFFFF"; //筆に白い絵の具をつけて
    ctx.fillRect(0, 0, 600, 600); //四角を描く
  }

  function dragStart(event) {
    context.beginPath();

    isDrag = true;
  }

  function dragEnd(event) {
    context.closePath();
    isDrag = false;
    lastPosition.x = null;
    lastPosition.y = null;
  }

  function initEventHandler() {
    const clearButton = document.querySelector("#clear-button");
    const eraserButton = document.querySelector("#eraser-button");
    clearButton.addEventListener("click", clear);
    eraserButton.addEventListener("click", () => {
      currentColor = "#FFFFFF";
    });

    // layeredCanvasAreaは2つのcanvas要素を保持している。2つのcanvasはそれぞれ以下の役割を持つ
    //
    // 1. 絵を書くためのcanvas
    // 2. 現在のマウスの位置を中心として、太さを「○」の形で表現するためのcanvas
    //
    // 1と2の機能を1つのキャンパスで共存することは出来ない。
    // 共存できない理由は以下の通り。
    //
    // - 1の機能は過去に描画してきた線の保持し続ける
    // - 2の機能は前回描画したものを削除する必要がある。削除しなかった場合は、過去の「○」が残り続けてしまう。(以下の画像URLを参照)
    //   - https://tsuyopon.xyz/wp-content/uploads/2018/09/line-width-indicator-with-bug.gif
    //
    // 上記2つの理由より
    // - 1のときはcontext.clearRectを使うことが出来ず
    // - 2のときはcontextForWidthIndicator.clearRectを使う必要がある
    const layeredCanvasArea = document.querySelector(
      "#layerd-canvas-area"
    );

    // 元々はcanvas.addEventListenerとしていたが、
    // 2つのcanvasを重ねて使うようになったため、親要素である <span id="layerd-canvas-area">に対して
    // イベント処理を定義するようにした。
    layeredCanvasArea.addEventListener("mousedown", dragStart);
    layeredCanvasArea.addEventListener("mouseup", dragEnd);
    layeredCanvasArea.addEventListener("mouseout", dragEnd);
    layeredCanvasArea.addEventListener("mousemove", (event) => {
      // 2つのcanvasに対する描画処理を行う

      // 実際に線を引くcanvasに描画を行う。(ドラッグ中のみ線の描画を行う)
      draw(event.layerX, event.layerY);

      // 現在のマウスの位置を中心として、線の太さを「○」で表現するためのcanvasに描画を行う
      showLineWidthIndicator(event.layerX, event.layerY);
    });
  }

  function initColorPalette() {
    const joe = colorjoe.rgb("color-palette", currentColor);
    joe.on("done", (color) => {
      currentColor = color.hex();
    });
  }

  // 文字の太さの設定・更新を行う機能
  function initConfigOfLineWidth() {
    const textForCurrentSize = document.querySelector("#line-width");
    const rangeSelector = document.querySelector("#range-selector");
    const numberField = document.getElementById(
      "line-width-number-field"
    );
    // 線の太さを記憶している変数の値を更新する
    currentLineWidth = rangeSelector.value;

   // 線を<input type='number'>からも更新できるようにする。
    numberField.addEventListener("input", (event) => {
      const width = event.target.value;
      // 線の太さを記憶している変数の値を更新する
      currentLineWidth = width;
      rangeSelector.value = width;
      // 更新した線の太さ値(数値)を<input id="range-selector" type="range">の右側に表示する
      textForCurrentSize.innerText = width;
    });
    // "input"イベントをセットすることでスライド中の値も取得できるようになる。
    // ドキュメント: https://developer.mozilla.org/ja/docs/Web/HTML/Element/Input/range

    rangeSelector.addEventListener("input", (event) => {
      const width = event.target.value;
      numberField.value = width;
      // 線の太さを記憶している変数の値を更新する
      currentLineWidth = width;

      // 更新した線の太さ値(数値)を<input id="range-selector" type="range">の右側に表示する
      textForCurrentSize.innerText = width;
    });
  }

  initEventHandler();
  initColorPalette();

  // 文字の太さの設定を行う機能を有効にする
  initConfigOfLineWidth();
  var draw_picture_btn = document.getElementById("draw_picture_btn");
  var img_value = document.getElementById("img-value-form");
  var xhr = new XMLHttpRequest();
  draw_picture_btn.addEventListener('click', function(){
    let canvas = document.getElementById("draw-area");
    let base64 = canvas.toDataURL("image/jpeg");

    $.ajax({
    	type: 'post',
    	url: '/messages',
    	data: {image: base64, room_id: $('#messages').data('room_id')}
    });
  });

});
</script>
